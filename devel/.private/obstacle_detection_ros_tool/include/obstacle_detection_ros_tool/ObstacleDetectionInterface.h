// *********************************************************
//
// File autogenerated for the obstacle_detection_ros_tool package
// by the rosinterface_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <limits>
#include <memory>
#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosinterface_handler/utilities.hpp>
#ifdef MESSAGE_FILTERS_FOUND
#include <message_filters/subscriber.h>

#else

#endif
#ifdef DYNAMIC_RECONFIGURE_FOUND
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses"
#include <obstacle_detection_ros_tool/ObstacleDetectionConfig.h>
#pragma GCC diagnostic pop
#else
struct ObstacleDetectionConfig{};
#endif


namespace obstacle_detection_ros_tool {

/// \brief Parameter struct generated by rosinterface_handler
struct ObstacleDetectionInterface {

  using Config = ObstacleDetectionConfig;
#ifdef MESSAGE_FILTERS_FOUND
  template<typename T>
  using Subscriber = message_filters::Subscriber<T>;
  template<typename T>
  using SubscriberPtr = std::shared_ptr<Subscriber<T>>;
#endif
#ifdef IF_HANDLER_DIAGNOSTICS_INCLUDED
  template<typename T>
  using DiagSubscriber = rosinterface_handler::DiagnosedSubscriber<T>;
  template<typename T>
  using DiagSubscriberPtr = std::shared_ptr<DiagSubscriber<T>>;
  template<typename T>
  using DiagPublisher = rosinterface_handler::DiagnosedPublisher<T>;
#endif

  ObstacleDetectionInterface(const ros::NodeHandle& private_node_handle)
  : globalNamespace_{"/"},
    publicNamespace_{rosinterface_handler::getParentNamespace(private_node_handle) + "/"},
    privateNamespace_{private_node_handle.getNamespace() + "/"},
    nodeName_{rosinterface_handler::getNodeName(private_node_handle)},
    privateNodeHandle_{private_node_handle} {}

  /// \brief Get values from parameter server
  ///
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosinterface_handler::getParam(privateNamespace_ + "verbosity", verbosity, std::string{"info"});
    rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_debug");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_info");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_warning");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_error");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_fatal");
    success &= rosinterface_handler::getParam(privateNamespace_ + "queue_size", queue_size, int{15});
    success &= rosinterface_handler::getParam(privateNamespace_ + "dummy", dummy, double{0.1});
    success &= rosinterface_handler::getParam(privateNamespace_ + "kinect_ir_frame", kinect_ir_frame, std::string{""});
    success &= rosinterface_handler::getParam(privateNamespace_ + "kinect_rgb_frame", kinect_rgb_frame, std::string{""});
    success &= rosinterface_handler::getParam(privateNamespace_ + "vehicle_front_axle", vehicle_front_axle, std::string{""});
    success &= rosinterface_handler::getParam(privateNamespace_ + "camera_top", camera_top, std::string{""});
    success &= rosinterface_handler::getParam(privateNamespace_ + "stargazer", stargazer, std::string{""});
    success &= rosinterface_handler::getParam(privateNamespace_ + "world", world, std::string{""});



    rosinterface_handler::testMin<int>(privateNamespace_ + "queue_size", queue_size, 0);
    rosinterface_handler::testMax<int>(privateNamespace_ + "queue_size", queue_size, 100);
    rosinterface_handler::testMin<double>(privateNamespace_ + "dummy", dummy, 0);
    rosinterface_handler::testMax<double>(privateNamespace_ + "dummy", dummy, 1);
    if(!success){
      missingParamsWarning();
      rosinterface_handler::exit("RosinterfaceHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
    rosinterface_handler::setParam(privateNamespace_ + "verbosity",verbosity);
    rosinterface_handler::setParam(privateNamespace_ + "queue_size",queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "dummy",dummy);
    rosinterface_handler::setParam(privateNamespace_ + "kinect_ir_frame",kinect_ir_frame);
    rosinterface_handler::setParam(privateNamespace_ + "kinect_rgb_frame",kinect_rgb_frame);
    rosinterface_handler::setParam(privateNamespace_ + "vehicle_front_axle",vehicle_front_axle);
    rosinterface_handler::setParam(privateNamespace_ + "camera_top",camera_top);
    rosinterface_handler::setParam(privateNamespace_ + "stargazer",stargazer);
    rosinterface_handler::setParam(privateNamespace_ + "world",world);
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND

    if(config.verbosity != this->verbosity) {
        rosinterface_handler::setParam(privateNamespace_ + "verbosity", config.verbosity);
        rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity");
    }
    verbosity = config.verbosity;
    queue_size = config.queue_size;
    dummy = config.dummy;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosinterface_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const ObstacleDetectionInterface& p)
  {
    os << "[" << p.nodeName_ << "]\nNode " << p.nodeName_ << " has the following parameters:\n"
      << "	" << p.privateNamespace_ << "verbosity:" << p.verbosity << "\n"
      << "	" << p.privateNamespace_ << "verbosity_debug:" << p.verbosity_debug << "\n"
      << "	" << p.privateNamespace_ << "verbosity_info:" << p.verbosity_info << "\n"
      << "	" << p.privateNamespace_ << "verbosity_warning:" << p.verbosity_warning << "\n"
      << "	" << p.privateNamespace_ << "verbosity_error:" << p.verbosity_error << "\n"
      << "	" << p.privateNamespace_ << "verbosity_fatal:" << p.verbosity_fatal << "\n"
      << "	" << p.privateNamespace_ << "queue_size:" << p.queue_size << "\n"
      << "	" << p.privateNamespace_ << "dummy:" << p.dummy << "\n"
      << "	" << p.privateNamespace_ << "kinect_ir_frame:" << p.kinect_ir_frame << "\n"
      << "	" << p.privateNamespace_ << "kinect_rgb_frame:" << p.kinect_rgb_frame << "\n"
      << "	" << p.privateNamespace_ << "vehicle_front_axle:" << p.vehicle_front_axle << "\n"
      << "	" << p.privateNamespace_ << "camera_top:" << p.camera_top << "\n"
      << "	" << p.privateNamespace_ << "stargazer:" << p.stargazer << "\n"
      << "	" << p.privateNamespace_ << "world:" << p.world << "\n"
;
    return os;
  }

  /// \brief get the node handle that the interface struct uses internally
  ros::NodeHandle getPrivateNodeHandle() {
      return privateNodeHandle_;
  }

  /// \brief returns the name of the node (works in nodelets, too)
  const std::string& nodeName() {
      return nodeName_;
  }
private:
  const std::string globalNamespace_;
  const std::string publicNamespace_;
  const std::string privateNamespace_;
  const std::string nodeName_;
  ros::NodeHandle privateNodeHandle_;

public:
  std::string verbosity; /*!< Sets the verbosity for this node */
  static constexpr auto verbosity_debug = "debug"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_info = "info"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_warning = "warning"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_error = "error"; /*!< Constant for enum verbosity */
  static constexpr auto verbosity_fatal = "fatal"; /*!< Constant for enum verbosity */
  int queue_size; /*!< queue size */
  double dummy; /*!< My Dummy Parameter */
  std::string kinect_ir_frame; /*!< frame id */
  std::string kinect_rgb_frame; /*!< frame id */
  std::string vehicle_front_axle; /*!< frame id */
  std::string camera_top; /*!< frame id */
  std::string stargazer; /*!< frame id */
  std::string world; /*!< frame id */



private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName_ << "]\nThe following parameters do not have default values and need to be specified:\n"
    );
  }
};

} // namespace obstacle_detection_ros_tool
