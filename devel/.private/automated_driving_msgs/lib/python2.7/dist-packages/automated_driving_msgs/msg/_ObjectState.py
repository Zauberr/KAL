# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from automated_driving_msgs/ObjectState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import shape_msgs.msg
import automated_driving_msgs.msg
import std_msgs.msg

class ObjectState(genpy.Message):
  _md5sum = "252f7388e514cebd27017dc53d461b71"
  _type = "automated_driving_msgs/ObjectState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message for the state of an object
# License: BSD

# Header
Header header

# Lifetime ID of the object
uint32 object_id

# Existence measure
#    Range: [0, 1]
float32 existence_probability

# Object classification
ObjectClassification classification

# Motion state of the object
MotionState motion_state

# Current motion prediction of the object
MotionPrediction motion_prediction

# Standard Message for the object dimensions
#    Relative to motion_state/pose/pose
#    For further details: http://docs.ros.org/api/shape_msgs/html/msg/Mesh.html
shape_msgs/Mesh hull

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: automated_driving_msgs/ObjectClassification
# Object Classification: classes with probabilities
# License: BSD

# Possible Types (enum, to be extended)
uint8 UNCLASSIFIED=0
uint8 PEDESTRIAN=1
uint8 BICYCLE=2
uint8 MOTORBIKE=3
uint8 CAR=4
uint8 TRUCK=5
# Virtual Object (e.g. for behavior generation)
uint8 VIRTUAL_OBJECT=81
# If object class is definitely none of the upper, these classes are to be used
uint8 OTHER_STATIC=91
uint8 OTHER_DYNAMIC=92

# The object classes with their respective probability
#    Sorted descending by probability (highest first)
ClassWithProbability[] classes_with_probabilities

================================================================================
MSG: automated_driving_msgs/ClassWithProbability
# One class with its respective probability
# License: BSD

uint8 classification

# Class probability
#    Range: [0, 1]
float32 probability

================================================================================
MSG: automated_driving_msgs/MotionState
# This represents an estimate of a MotionState (position, velocity and acceleration) in free space.
# NOTE: Similar to nav_msgs/Odometry but including acceleration (http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html)
# License: BSD

# Header
#   frame_id of the global reference frame (common: "map", "odom")
Header header

#   frame_id of the child frame that this MotionState describes (common: "vehicle", "sensor_x")
string child_frame_id

# Pose (Position + Orientation)
#   must be specified in the coordinate frame given by header.frame_id
#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/PoseWithCovariance.html
geometry_msgs/PoseWithCovariance pose

# Velocity
#   must be specified in the coordinate frame given by child_frame_id
#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/TwistWithCovariance.html
geometry_msgs/TwistWithCovariance twist

# Acceleration
#   must be specified in the coordinate frame given by child_frame_id
#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/AccelWithCovariance.html
geometry_msgs/AccelWithCovariance accel

# Treatment of unavailable data: almost as in http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html:
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the
# variance of each measurement, e.g. from a datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements, please set _the respective diagonal_ element
# of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the _diagonal_ elements
# of each covariance matrix, and disregard the associated estimates.

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: automated_driving_msgs/MotionPrediction
# Message for the prediction of an object
# License: BSD

# Header
Header header

# Possible Trajectories (including their probability)
#    Sorted descending by probability (highest first)
Trajectory[] trajectories

================================================================================
MSG: automated_driving_msgs/Trajectory
# Message representing a trajectory as consecutive motion states
# NOTE: not compatible to http://wiki.ros.org/trajectory_msgs
# License: BSD

# ID of the trajectory
#    Meant to be unique for one set of trajectories
uint32 id

# Probability of the trajectory
#    Range: [0, 1]
#    To be set only if a set of trajectories is given
float32 probability

# Array of motion states with time that describe the trajectory
#    Sorted ascending by time
MotionState[] motion_states

# Array of polygons to describe the set-based position uncertainty
#    Array indices matching the MotionState[]; z=0 for each polygon point
#    For further details: http://docs.ros.org/api/geometry_msgs/html/msg/Polygon.html
geometry_msgs/Polygon[] set_based_position_uncertainty

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices
"""
  __slots__ = ['header','object_id','existence_probability','classification','motion_state','motion_prediction','hull']
  _slot_types = ['std_msgs/Header','uint32','float32','automated_driving_msgs/ObjectClassification','automated_driving_msgs/MotionState','automated_driving_msgs/MotionPrediction','shape_msgs/Mesh']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,object_id,existence_probability,classification,motion_state,motion_prediction,hull

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.object_id is None:
        self.object_id = 0
      if self.existence_probability is None:
        self.existence_probability = 0.
      if self.classification is None:
        self.classification = automated_driving_msgs.msg.ObjectClassification()
      if self.motion_state is None:
        self.motion_state = automated_driving_msgs.msg.MotionState()
      if self.motion_prediction is None:
        self.motion_prediction = automated_driving_msgs.msg.MotionPrediction()
      if self.hull is None:
        self.hull = shape_msgs.msg.Mesh()
    else:
      self.header = std_msgs.msg.Header()
      self.object_id = 0
      self.existence_probability = 0.
      self.classification = automated_driving_msgs.msg.ObjectClassification()
      self.motion_state = automated_driving_msgs.msg.MotionState()
      self.motion_prediction = automated_driving_msgs.msg.MotionPrediction()
      self.hull = shape_msgs.msg.Mesh()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_If().pack(_x.object_id, _x.existence_probability))
      length = len(self.classification.classes_with_probabilities)
      buff.write(_struct_I.pack(length))
      for val1 in self.classification.classes_with_probabilities:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.classification, _x.probability))
      _x = self
      buff.write(_get_struct_3I().pack(_x.motion_state.header.seq, _x.motion_state.header.stamp.secs, _x.motion_state.header.stamp.nsecs))
      _x = self.motion_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motion_state.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.motion_state.pose.pose.position.x, _x.motion_state.pose.pose.position.y, _x.motion_state.pose.pose.position.z, _x.motion_state.pose.pose.orientation.x, _x.motion_state.pose.pose.orientation.y, _x.motion_state.pose.pose.orientation.z, _x.motion_state.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.motion_state.pose.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.motion_state.twist.twist.linear.x, _x.motion_state.twist.twist.linear.y, _x.motion_state.twist.twist.linear.z, _x.motion_state.twist.twist.angular.x, _x.motion_state.twist.twist.angular.y, _x.motion_state.twist.twist.angular.z))
      buff.write(_get_struct_36d().pack(*self.motion_state.twist.covariance))
      _x = self
      buff.write(_get_struct_6d().pack(_x.motion_state.accel.accel.linear.x, _x.motion_state.accel.accel.linear.y, _x.motion_state.accel.accel.linear.z, _x.motion_state.accel.accel.angular.x, _x.motion_state.accel.accel.angular.y, _x.motion_state.accel.accel.angular.z))
      buff.write(_get_struct_36d().pack(*self.motion_state.accel.covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.motion_prediction.header.seq, _x.motion_prediction.header.stamp.secs, _x.motion_prediction.header.stamp.nsecs))
      _x = self.motion_prediction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.motion_prediction.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.motion_prediction.trajectories:
        _x = val1
        buff.write(_get_struct_If().pack(_x.id, _x.probability))
        length = len(val1.motion_states)
        buff.write(_struct_I.pack(length))
        for val2 in val1.motion_states:
          _v1 = val2.header
          buff.write(_get_struct_I().pack(_v1.seq))
          _v2 = _v1.stamp
          _x = _v2
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v1.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v3 = val2.pose
          _v4 = _v3.pose
          _v5 = _v4.position
          _x = _v5
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v6 = _v4.orientation
          _x = _v6
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_36d().pack(*_v3.covariance))
          _v7 = val2.twist
          _v8 = _v7.twist
          _v9 = _v8.linear
          _x = _v9
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v10 = _v8.angular
          _x = _v10
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v7.covariance))
          _v11 = val2.accel
          _v12 = _v11.accel
          _v13 = _v12.linear
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = _v12.angular
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_get_struct_36d().pack(*_v11.covariance))
        length = len(val1.set_based_position_uncertainty)
        buff.write(_struct_I.pack(length))
        for val2 in val1.set_based_position_uncertainty:
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.hull.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.hull.triangles:
        buff.write(_get_struct_3I().pack(*val1.vertex_indices))
      length = len(self.hull.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.hull.vertices:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.classification is None:
        self.classification = automated_driving_msgs.msg.ObjectClassification()
      if self.motion_state is None:
        self.motion_state = automated_driving_msgs.msg.MotionState()
      if self.motion_prediction is None:
        self.motion_prediction = automated_driving_msgs.msg.MotionPrediction()
      if self.hull is None:
        self.hull = shape_msgs.msg.Mesh()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.object_id, _x.existence_probability,) = _get_struct_If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classification.classes_with_probabilities = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.ClassWithProbability()
        _x = val1
        start = end
        end += 5
        (_x.classification, _x.probability,) = _get_struct_Bf().unpack(str[start:end])
        self.classification.classes_with_probabilities.append(val1)
      _x = self
      start = end
      end += 12
      (_x.motion_state.header.seq, _x.motion_state.header.stamp.secs, _x.motion_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.motion_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_state.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.motion_state.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.motion_state.pose.pose.position.x, _x.motion_state.pose.pose.position.y, _x.motion_state.pose.pose.position.z, _x.motion_state.pose.pose.orientation.x, _x.motion_state.pose.pose.orientation.y, _x.motion_state.pose.pose.orientation.z, _x.motion_state.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.motion_state.pose.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.motion_state.twist.twist.linear.x, _x.motion_state.twist.twist.linear.y, _x.motion_state.twist.twist.linear.z, _x.motion_state.twist.twist.angular.x, _x.motion_state.twist.twist.angular.y, _x.motion_state.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.motion_state.twist.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.motion_state.accel.accel.linear.x, _x.motion_state.accel.accel.linear.y, _x.motion_state.accel.accel.linear.z, _x.motion_state.accel.accel.angular.x, _x.motion_state.accel.accel.angular.y, _x.motion_state.accel.accel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.motion_state.accel.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.motion_prediction.header.seq, _x.motion_prediction.header.stamp.secs, _x.motion_prediction.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_prediction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.motion_prediction.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motion_prediction.trajectories = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.Trajectory()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.probability,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.motion_states = []
        for i in range(0, length):
          val2 = automated_driving_msgs.msg.MotionState()
          _v15 = val2.header
          start = end
          end += 4
          (_v15.seq,) = _get_struct_I().unpack(str[start:end])
          _v16 = _v15.stamp
          _x = _v16
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v15.frame_id = str[start:end].decode('utf-8')
          else:
            _v15.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.child_frame_id = str[start:end].decode('utf-8')
          else:
            val2.child_frame_id = str[start:end]
          _v17 = val2.pose
          _v18 = _v17.pose
          _v19 = _v18.position
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v20 = _v18.orientation
          _x = _v20
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v17.covariance = _get_struct_36d().unpack(str[start:end])
          _v21 = val2.twist
          _v22 = _v21.twist
          _v23 = _v22.linear
          _x = _v23
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v24 = _v22.angular
          _x = _v24
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v21.covariance = _get_struct_36d().unpack(str[start:end])
          _v25 = val2.accel
          _v26 = _v25.accel
          _v27 = _v26.linear
          _x = _v27
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v28 = _v26.angular
          _x = _v28
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v25.covariance = _get_struct_36d().unpack(str[start:end])
          val1.motion_states.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.set_based_position_uncertainty = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Polygon()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point32()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.points.append(val3)
          val1.set_based_position_uncertainty.append(val2)
        self.motion_prediction.trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hull.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = _get_struct_3I().unpack(str[start:end])
        self.hull.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hull.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.hull.vertices.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_If().pack(_x.object_id, _x.existence_probability))
      length = len(self.classification.classes_with_probabilities)
      buff.write(_struct_I.pack(length))
      for val1 in self.classification.classes_with_probabilities:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.classification, _x.probability))
      _x = self
      buff.write(_get_struct_3I().pack(_x.motion_state.header.seq, _x.motion_state.header.stamp.secs, _x.motion_state.header.stamp.nsecs))
      _x = self.motion_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motion_state.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.motion_state.pose.pose.position.x, _x.motion_state.pose.pose.position.y, _x.motion_state.pose.pose.position.z, _x.motion_state.pose.pose.orientation.x, _x.motion_state.pose.pose.orientation.y, _x.motion_state.pose.pose.orientation.z, _x.motion_state.pose.pose.orientation.w))
      buff.write(self.motion_state.pose.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.motion_state.twist.twist.linear.x, _x.motion_state.twist.twist.linear.y, _x.motion_state.twist.twist.linear.z, _x.motion_state.twist.twist.angular.x, _x.motion_state.twist.twist.angular.y, _x.motion_state.twist.twist.angular.z))
      buff.write(self.motion_state.twist.covariance.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.motion_state.accel.accel.linear.x, _x.motion_state.accel.accel.linear.y, _x.motion_state.accel.accel.linear.z, _x.motion_state.accel.accel.angular.x, _x.motion_state.accel.accel.angular.y, _x.motion_state.accel.accel.angular.z))
      buff.write(self.motion_state.accel.covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.motion_prediction.header.seq, _x.motion_prediction.header.stamp.secs, _x.motion_prediction.header.stamp.nsecs))
      _x = self.motion_prediction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.motion_prediction.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.motion_prediction.trajectories:
        _x = val1
        buff.write(_get_struct_If().pack(_x.id, _x.probability))
        length = len(val1.motion_states)
        buff.write(_struct_I.pack(length))
        for val2 in val1.motion_states:
          _v29 = val2.header
          buff.write(_get_struct_I().pack(_v29.seq))
          _v30 = _v29.stamp
          _x = _v30
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v29.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.child_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v31 = val2.pose
          _v32 = _v31.pose
          _v33 = _v32.position
          _x = _v33
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v34 = _v32.orientation
          _x = _v34
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_v31.covariance.tostring())
          _v35 = val2.twist
          _v36 = _v35.twist
          _v37 = _v36.linear
          _x = _v37
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v38 = _v36.angular
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v35.covariance.tostring())
          _v39 = val2.accel
          _v40 = _v39.accel
          _v41 = _v40.linear
          _x = _v41
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v42 = _v40.angular
          _x = _v42
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          buff.write(_v39.covariance.tostring())
        length = len(val1.set_based_position_uncertainty)
        buff.write(_struct_I.pack(length))
        for val2 in val1.set_based_position_uncertainty:
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.hull.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.hull.triangles:
        buff.write(val1.vertex_indices.tostring())
      length = len(self.hull.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.hull.vertices:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.classification is None:
        self.classification = automated_driving_msgs.msg.ObjectClassification()
      if self.motion_state is None:
        self.motion_state = automated_driving_msgs.msg.MotionState()
      if self.motion_prediction is None:
        self.motion_prediction = automated_driving_msgs.msg.MotionPrediction()
      if self.hull is None:
        self.hull = shape_msgs.msg.Mesh()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.object_id, _x.existence_probability,) = _get_struct_If().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classification.classes_with_probabilities = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.ClassWithProbability()
        _x = val1
        start = end
        end += 5
        (_x.classification, _x.probability,) = _get_struct_Bf().unpack(str[start:end])
        self.classification.classes_with_probabilities.append(val1)
      _x = self
      start = end
      end += 12
      (_x.motion_state.header.seq, _x.motion_state.header.stamp.secs, _x.motion_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.motion_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_state.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.motion_state.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.motion_state.pose.pose.position.x, _x.motion_state.pose.pose.position.y, _x.motion_state.pose.pose.position.z, _x.motion_state.pose.pose.orientation.x, _x.motion_state.pose.pose.orientation.y, _x.motion_state.pose.pose.orientation.z, _x.motion_state.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.motion_state.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.motion_state.twist.twist.linear.x, _x.motion_state.twist.twist.linear.y, _x.motion_state.twist.twist.linear.z, _x.motion_state.twist.twist.angular.x, _x.motion_state.twist.twist.angular.y, _x.motion_state.twist.twist.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.motion_state.twist.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.motion_state.accel.accel.linear.x, _x.motion_state.accel.accel.linear.y, _x.motion_state.accel.accel.linear.z, _x.motion_state.accel.accel.angular.x, _x.motion_state.accel.accel.angular.y, _x.motion_state.accel.accel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 288
      self.motion_state.accel.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 12
      (_x.motion_prediction.header.seq, _x.motion_prediction.header.stamp.secs, _x.motion_prediction.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motion_prediction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.motion_prediction.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motion_prediction.trajectories = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.Trajectory()
        _x = val1
        start = end
        end += 8
        (_x.id, _x.probability,) = _get_struct_If().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.motion_states = []
        for i in range(0, length):
          val2 = automated_driving_msgs.msg.MotionState()
          _v43 = val2.header
          start = end
          end += 4
          (_v43.seq,) = _get_struct_I().unpack(str[start:end])
          _v44 = _v43.stamp
          _x = _v44
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v43.frame_id = str[start:end].decode('utf-8')
          else:
            _v43.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.child_frame_id = str[start:end].decode('utf-8')
          else:
            val2.child_frame_id = str[start:end]
          _v45 = val2.pose
          _v46 = _v45.pose
          _v47 = _v46.position
          _x = _v47
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v48 = _v46.orientation
          _x = _v48
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 288
          _v45.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v49 = val2.twist
          _v50 = _v49.twist
          _v51 = _v50.linear
          _x = _v51
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v52 = _v50.angular
          _x = _v52
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v49.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          _v53 = val2.accel
          _v54 = _v53.accel
          _v55 = _v54.linear
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = _v54.angular
          _x = _v56
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 288
          _v53.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
          val1.motion_states.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.set_based_position_uncertainty = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Polygon()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point32()
            _x = val3
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            val2.points.append(val3)
          val1.set_based_position_uncertainty.append(val2)
        self.motion_prediction.trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hull.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
        self.hull.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hull.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.hull.vertices.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
