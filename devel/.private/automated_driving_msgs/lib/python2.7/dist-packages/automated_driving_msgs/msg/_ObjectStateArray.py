# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from automated_driving_msgs/ObjectStateArray.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import shape_msgs.msg
import automated_driving_msgs.msg
import std_msgs.msg

class ObjectStateArray(genpy.Message):
  _md5sum = "a5c500e1a3ee9d84630928c547daf2f1"
  _type = "automated_driving_msgs/ObjectStateArray"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Message an array of object states (output of localization management)
# License: BSD

# Header
Header header

# Array of object states
ObjectState[] objects

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: automated_driving_msgs/ObjectState
# Message for the state of an object
# License: BSD

# Header
Header header

# Lifetime ID of the object
uint32 object_id

# Existence measure
#    Range: [0, 1]
float32 existence_probability

# Object classification
ObjectClassification classification

# Motion state of the object
MotionState motion_state

# Current motion prediction of the object
MotionPrediction motion_prediction

# Standard Message for the object dimensions
#    Relative to motion_state/pose/pose
#    For further details: http://docs.ros.org/api/shape_msgs/html/msg/Mesh.html
shape_msgs/Mesh hull

================================================================================
MSG: automated_driving_msgs/ObjectClassification
# Object Classification: classes with probabilities
# License: BSD

# Possible Types (enum, to be extended)
uint8 UNCLASSIFIED=0
uint8 PEDESTRIAN=1
uint8 BICYCLE=2
uint8 MOTORBIKE=3
uint8 CAR=4
uint8 TRUCK=5
# Virtual Object (e.g. for behavior generation)
uint8 VIRTUAL_OBJECT=81
# If object class is definitely none of the upper, these classes are to be used
uint8 OTHER_STATIC=91
uint8 OTHER_DYNAMIC=92

# The object classes with their respective probability
#    Sorted descending by probability (highest first)
ClassWithProbability[] classes_with_probabilities

================================================================================
MSG: automated_driving_msgs/ClassWithProbability
# One class with its respective probability
# License: BSD

uint8 classification

# Class probability
#    Range: [0, 1]
float32 probability

================================================================================
MSG: automated_driving_msgs/MotionState
# This represents an estimate of a MotionState (position, velocity and acceleration) in free space.
# NOTE: Similar to nav_msgs/Odometry but including acceleration (http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html)
# License: BSD

# Header
#   frame_id of the global reference frame (common: "map", "odom")
Header header

#   frame_id of the child frame that this MotionState describes (common: "vehicle", "sensor_x")
string child_frame_id

# Pose (Position + Orientation)
#   must be specified in the coordinate frame given by header.frame_id
#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/PoseWithCovariance.html
geometry_msgs/PoseWithCovariance pose

# Velocity
#   must be specified in the coordinate frame given by child_frame_id
#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/TwistWithCovariance.html
geometry_msgs/TwistWithCovariance twist

# Acceleration
#   must be specified in the coordinate frame given by child_frame_id
#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/AccelWithCovariance.html
geometry_msgs/AccelWithCovariance accel

# Treatment of unavailable data: almost as in http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html:
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the
# variance of each measurement, e.g. from a datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements, please set _the respective diagonal_ element
# of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the _diagonal_ elements
# of each covariance matrix, and disregard the associated estimates.

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: automated_driving_msgs/MotionPrediction
# Message for the prediction of an object
# License: BSD

# Header
Header header

# Possible Trajectories (including their probability)
#    Sorted descending by probability (highest first)
Trajectory[] trajectories

================================================================================
MSG: automated_driving_msgs/Trajectory
# Message representing a trajectory as consecutive motion states
# NOTE: not compatible to http://wiki.ros.org/trajectory_msgs
# License: BSD

# ID of the trajectory
#    Meant to be unique for one set of trajectories
uint32 id

# Probability of the trajectory
#    Range: [0, 1]
#    To be set only if a set of trajectories is given
float32 probability

# Array of motion states with time that describe the trajectory
#    Sorted ascending by time
MotionState[] motion_states

# Array of polygons to describe the set-based position uncertainty
#    Array indices matching the MotionState[]; z=0 for each polygon point
#    For further details: http://docs.ros.org/api/geometry_msgs/html/msg/Polygon.html
geometry_msgs/Polygon[] set_based_position_uncertainty

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices
"""
  __slots__ = ['header','objects']
  _slot_types = ['std_msgs/Header','automated_driving_msgs/ObjectState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectStateArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.header
        buff.write(_get_struct_I().pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_If().pack(_x.object_id, _x.existence_probability))
        _v3 = val1.classification
        length = len(_v3.classes_with_probabilities)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.classes_with_probabilities:
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.classification, _x.probability))
        _v4 = val1.motion_state
        _v5 = _v4.header
        buff.write(_get_struct_I().pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v4.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = _v4.pose
        _v8 = _v7.pose
        _v9 = _v8.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v7.covariance))
        _v11 = _v4.twist
        _v12 = _v11.twist
        _v13 = _v12.linear
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.angular
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v11.covariance))
        _v15 = _v4.accel
        _v16 = _v15.accel
        _v17 = _v16.linear
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.angular
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v15.covariance))
        _v19 = val1.motion_prediction
        _v20 = _v19.header
        buff.write(_get_struct_I().pack(_v20.seq))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v19.trajectories)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.trajectories:
          _x = val3
          buff.write(_get_struct_If().pack(_x.id, _x.probability))
          length = len(val3.motion_states)
          buff.write(_struct_I.pack(length))
          for val4 in val3.motion_states:
            _v22 = val4.header
            buff.write(_get_struct_I().pack(_v22.seq))
            _v23 = _v22.stamp
            _x = _v23
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v22.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val4.child_frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v24 = val4.pose
            _v25 = _v24.pose
            _v26 = _v25.position
            _x = _v26
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v27 = _v25.orientation
            _x = _v27
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_get_struct_36d().pack(*_v24.covariance))
            _v28 = val4.twist
            _v29 = _v28.twist
            _v30 = _v29.linear
            _x = _v30
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v31 = _v29.angular
            _x = _v31
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            buff.write(_get_struct_36d().pack(*_v28.covariance))
            _v32 = val4.accel
            _v33 = _v32.accel
            _v34 = _v33.linear
            _x = _v34
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v35 = _v33.angular
            _x = _v35
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            buff.write(_get_struct_36d().pack(*_v32.covariance))
          length = len(val3.set_based_position_uncertainty)
          buff.write(_struct_I.pack(length))
          for val4 in val3.set_based_position_uncertainty:
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              _x = val5
              buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v36 = val1.hull
        length = len(_v36.triangles)
        buff.write(_struct_I.pack(length))
        for val3 in _v36.triangles:
          buff.write(_get_struct_3I().pack(*val3.vertex_indices))
        length = len(_v36.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v36.vertices:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.ObjectState()
        _v37 = val1.header
        start = end
        end += 4
        (_v37.seq,) = _get_struct_I().unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8')
        else:
          _v37.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.object_id, _x.existence_probability,) = _get_struct_If().unpack(str[start:end])
        _v39 = val1.classification
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v39.classes_with_probabilities = []
        for i in range(0, length):
          val3 = automated_driving_msgs.msg.ClassWithProbability()
          _x = val3
          start = end
          end += 5
          (_x.classification, _x.probability,) = _get_struct_Bf().unpack(str[start:end])
          _v39.classes_with_probabilities.append(val3)
        _v40 = val1.motion_state
        _v41 = _v40.header
        start = end
        end += 4
        (_v41.seq,) = _get_struct_I().unpack(str[start:end])
        _v42 = _v41.stamp
        _x = _v42
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v41.frame_id = str[start:end].decode('utf-8')
        else:
          _v41.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v40.child_frame_id = str[start:end].decode('utf-8')
        else:
          _v40.child_frame_id = str[start:end]
        _v43 = _v40.pose
        _v44 = _v43.pose
        _v45 = _v44.position
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v46 = _v44.orientation
        _x = _v46
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v43.covariance = _get_struct_36d().unpack(str[start:end])
        _v47 = _v40.twist
        _v48 = _v47.twist
        _v49 = _v48.linear
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v50 = _v48.angular
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v47.covariance = _get_struct_36d().unpack(str[start:end])
        _v51 = _v40.accel
        _v52 = _v51.accel
        _v53 = _v52.linear
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v54 = _v52.angular
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v51.covariance = _get_struct_36d().unpack(str[start:end])
        _v55 = val1.motion_prediction
        _v56 = _v55.header
        start = end
        end += 4
        (_v56.seq,) = _get_struct_I().unpack(str[start:end])
        _v57 = _v56.stamp
        _x = _v57
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.frame_id = str[start:end].decode('utf-8')
        else:
          _v56.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v55.trajectories = []
        for i in range(0, length):
          val3 = automated_driving_msgs.msg.Trajectory()
          _x = val3
          start = end
          end += 8
          (_x.id, _x.probability,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.motion_states = []
          for i in range(0, length):
            val4 = automated_driving_msgs.msg.MotionState()
            _v58 = val4.header
            start = end
            end += 4
            (_v58.seq,) = _get_struct_I().unpack(str[start:end])
            _v59 = _v58.stamp
            _x = _v59
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v58.frame_id = str[start:end].decode('utf-8')
            else:
              _v58.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.child_frame_id = str[start:end].decode('utf-8')
            else:
              val4.child_frame_id = str[start:end]
            _v60 = val4.pose
            _v61 = _v60.pose
            _v62 = _v61.position
            _x = _v62
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v63 = _v61.orientation
            _x = _v63
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v60.covariance = _get_struct_36d().unpack(str[start:end])
            _v64 = val4.twist
            _v65 = _v64.twist
            _v66 = _v65.linear
            _x = _v66
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v67 = _v65.angular
            _x = _v67
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 288
            _v64.covariance = _get_struct_36d().unpack(str[start:end])
            _v68 = val4.accel
            _v69 = _v68.accel
            _v70 = _v69.linear
            _x = _v70
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v71 = _v69.angular
            _x = _v71
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 288
            _v68.covariance = _get_struct_36d().unpack(str[start:end])
            val3.motion_states.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.set_based_position_uncertainty = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Polygon()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point32()
              _x = val5
              start = end
              end += 12
              (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
              val4.points.append(val5)
            val3.set_based_position_uncertainty.append(val4)
          _v55.trajectories.append(val3)
        _v72 = val1.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v72.triangles = []
        for i in range(0, length):
          val3 = shape_msgs.msg.MeshTriangle()
          start = end
          end += 12
          val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
          _v72.triangles.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v72.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v72.vertices.append(val3)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v73 = val1.header
        buff.write(_get_struct_I().pack(_v73.seq))
        _v74 = _v73.stamp
        _x = _v74
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v73.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_If().pack(_x.object_id, _x.existence_probability))
        _v75 = val1.classification
        length = len(_v75.classes_with_probabilities)
        buff.write(_struct_I.pack(length))
        for val3 in _v75.classes_with_probabilities:
          _x = val3
          buff.write(_get_struct_Bf().pack(_x.classification, _x.probability))
        _v76 = val1.motion_state
        _v77 = _v76.header
        buff.write(_get_struct_I().pack(_v77.seq))
        _v78 = _v77.stamp
        _x = _v78
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v77.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v76.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v79 = _v76.pose
        _v80 = _v79.pose
        _v81 = _v80.position
        _x = _v81
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v82 = _v80.orientation
        _x = _v82
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v79.covariance.tostring())
        _v83 = _v76.twist
        _v84 = _v83.twist
        _v85 = _v84.linear
        _x = _v85
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v86 = _v84.angular
        _x = _v86
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v83.covariance.tostring())
        _v87 = _v76.accel
        _v88 = _v87.accel
        _v89 = _v88.linear
        _x = _v89
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v90 = _v88.angular
        _x = _v90
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v87.covariance.tostring())
        _v91 = val1.motion_prediction
        _v92 = _v91.header
        buff.write(_get_struct_I().pack(_v92.seq))
        _v93 = _v92.stamp
        _x = _v93
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v92.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v91.trajectories)
        buff.write(_struct_I.pack(length))
        for val3 in _v91.trajectories:
          _x = val3
          buff.write(_get_struct_If().pack(_x.id, _x.probability))
          length = len(val3.motion_states)
          buff.write(_struct_I.pack(length))
          for val4 in val3.motion_states:
            _v94 = val4.header
            buff.write(_get_struct_I().pack(_v94.seq))
            _v95 = _v94.stamp
            _x = _v95
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v94.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val4.child_frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _v96 = val4.pose
            _v97 = _v96.pose
            _v98 = _v97.position
            _x = _v98
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v99 = _v97.orientation
            _x = _v99
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_v96.covariance.tostring())
            _v100 = val4.twist
            _v101 = _v100.twist
            _v102 = _v101.linear
            _x = _v102
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v103 = _v101.angular
            _x = _v103
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            buff.write(_v100.covariance.tostring())
            _v104 = val4.accel
            _v105 = _v104.accel
            _v106 = _v105.linear
            _x = _v106
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v107 = _v105.angular
            _x = _v107
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            buff.write(_v104.covariance.tostring())
          length = len(val3.set_based_position_uncertainty)
          buff.write(_struct_I.pack(length))
          for val4 in val3.set_based_position_uncertainty:
            length = len(val4.points)
            buff.write(_struct_I.pack(length))
            for val5 in val4.points:
              _x = val5
              buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v108 = val1.hull
        length = len(_v108.triangles)
        buff.write(_struct_I.pack(length))
        for val3 in _v108.triangles:
          buff.write(val3.vertex_indices.tostring())
        length = len(_v108.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v108.vertices:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.ObjectState()
        _v109 = val1.header
        start = end
        end += 4
        (_v109.seq,) = _get_struct_I().unpack(str[start:end])
        _v110 = _v109.stamp
        _x = _v110
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v109.frame_id = str[start:end].decode('utf-8')
        else:
          _v109.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.object_id, _x.existence_probability,) = _get_struct_If().unpack(str[start:end])
        _v111 = val1.classification
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.classes_with_probabilities = []
        for i in range(0, length):
          val3 = automated_driving_msgs.msg.ClassWithProbability()
          _x = val3
          start = end
          end += 5
          (_x.classification, _x.probability,) = _get_struct_Bf().unpack(str[start:end])
          _v111.classes_with_probabilities.append(val3)
        _v112 = val1.motion_state
        _v113 = _v112.header
        start = end
        end += 4
        (_v113.seq,) = _get_struct_I().unpack(str[start:end])
        _v114 = _v113.stamp
        _x = _v114
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v113.frame_id = str[start:end].decode('utf-8')
        else:
          _v113.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v112.child_frame_id = str[start:end].decode('utf-8')
        else:
          _v112.child_frame_id = str[start:end]
        _v115 = _v112.pose
        _v116 = _v115.pose
        _v117 = _v116.position
        _x = _v117
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v118 = _v116.orientation
        _x = _v118
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v115.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v119 = _v112.twist
        _v120 = _v119.twist
        _v121 = _v120.linear
        _x = _v121
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v122 = _v120.angular
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v119.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v123 = _v112.accel
        _v124 = _v123.accel
        _v125 = _v124.linear
        _x = _v125
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v126 = _v124.angular
        _x = _v126
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v123.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        _v127 = val1.motion_prediction
        _v128 = _v127.header
        start = end
        end += 4
        (_v128.seq,) = _get_struct_I().unpack(str[start:end])
        _v129 = _v128.stamp
        _x = _v129
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v128.frame_id = str[start:end].decode('utf-8')
        else:
          _v128.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v127.trajectories = []
        for i in range(0, length):
          val3 = automated_driving_msgs.msg.Trajectory()
          _x = val3
          start = end
          end += 8
          (_x.id, _x.probability,) = _get_struct_If().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.motion_states = []
          for i in range(0, length):
            val4 = automated_driving_msgs.msg.MotionState()
            _v130 = val4.header
            start = end
            end += 4
            (_v130.seq,) = _get_struct_I().unpack(str[start:end])
            _v131 = _v130.stamp
            _x = _v131
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v130.frame_id = str[start:end].decode('utf-8')
            else:
              _v130.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.child_frame_id = str[start:end].decode('utf-8')
            else:
              val4.child_frame_id = str[start:end]
            _v132 = val4.pose
            _v133 = _v132.pose
            _v134 = _v133.position
            _x = _v134
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v135 = _v133.orientation
            _x = _v135
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v132.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
            _v136 = val4.twist
            _v137 = _v136.twist
            _v138 = _v137.linear
            _x = _v138
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v139 = _v137.angular
            _x = _v139
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 288
            _v136.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
            _v140 = val4.accel
            _v141 = _v140.accel
            _v142 = _v141.linear
            _x = _v142
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v143 = _v141.angular
            _x = _v143
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            start = end
            end += 288
            _v140.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
            val3.motion_states.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.set_based_position_uncertainty = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Polygon()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.points = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point32()
              _x = val5
              start = end
              end += 12
              (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
              val4.points.append(val5)
            val3.set_based_position_uncertainty.append(val4)
          _v127.trajectories.append(val3)
        _v144 = val1.hull
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v144.triangles = []
        for i in range(0, length):
          val3 = shape_msgs.msg.MeshTriangle()
          start = end
          end += 12
          val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
          _v144.triangles.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v144.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v144.vertices.append(val3)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_If = None
def _get_struct_If():
    global _struct_If
    if _struct_If is None:
        _struct_If = struct.Struct("<If")
    return _struct_If
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
