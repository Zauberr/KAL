# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from automated_driving_msgs/ObjectClassification.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import automated_driving_msgs.msg

class ObjectClassification(genpy.Message):
  _md5sum = "2870d8643da9a6670bb7ff8151c06889"
  _type = "automated_driving_msgs/ObjectClassification"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Object Classification: classes with probabilities
# License: BSD

# Possible Types (enum, to be extended)
uint8 UNCLASSIFIED=0
uint8 PEDESTRIAN=1
uint8 BICYCLE=2
uint8 MOTORBIKE=3
uint8 CAR=4
uint8 TRUCK=5
# Virtual Object (e.g. for behavior generation)
uint8 VIRTUAL_OBJECT=81
# If object class is definitely none of the upper, these classes are to be used
uint8 OTHER_STATIC=91
uint8 OTHER_DYNAMIC=92

# The object classes with their respective probability
#    Sorted descending by probability (highest first)
ClassWithProbability[] classes_with_probabilities

================================================================================
MSG: automated_driving_msgs/ClassWithProbability
# One class with its respective probability
# License: BSD

uint8 classification

# Class probability
#    Range: [0, 1]
float32 probability
"""
  # Pseudo-constants
  UNCLASSIFIED = 0
  PEDESTRIAN = 1
  BICYCLE = 2
  MOTORBIKE = 3
  CAR = 4
  TRUCK = 5
  VIRTUAL_OBJECT = 81
  OTHER_STATIC = 91
  OTHER_DYNAMIC = 92

  __slots__ = ['classes_with_probabilities']
  _slot_types = ['automated_driving_msgs/ClassWithProbability[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       classes_with_probabilities

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectClassification, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.classes_with_probabilities is None:
        self.classes_with_probabilities = []
    else:
      self.classes_with_probabilities = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.classes_with_probabilities)
      buff.write(_struct_I.pack(length))
      for val1 in self.classes_with_probabilities:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.classification, _x.probability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.classes_with_probabilities is None:
        self.classes_with_probabilities = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classes_with_probabilities = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.ClassWithProbability()
        _x = val1
        start = end
        end += 5
        (_x.classification, _x.probability,) = _get_struct_Bf().unpack(str[start:end])
        self.classes_with_probabilities.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.classes_with_probabilities)
      buff.write(_struct_I.pack(length))
      for val1 in self.classes_with_probabilities:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.classification, _x.probability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.classes_with_probabilities is None:
        self.classes_with_probabilities = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.classes_with_probabilities = []
      for i in range(0, length):
        val1 = automated_driving_msgs.msg.ClassWithProbability()
        _x = val1
        start = end
        end += 5
        (_x.classification, _x.probability,) = _get_struct_Bf().unpack(str[start:end])
        self.classes_with_probabilities.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
