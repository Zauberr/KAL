// Generated by gencpp from file automated_driving_msgs/ObjectClassification.msg
// DO NOT EDIT!


#ifndef AUTOMATED_DRIVING_MSGS_MESSAGE_OBJECTCLASSIFICATION_H
#define AUTOMATED_DRIVING_MSGS_MESSAGE_OBJECTCLASSIFICATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <automated_driving_msgs/ClassWithProbability.h>

namespace automated_driving_msgs
{
template <class ContainerAllocator>
struct ObjectClassification_
{
  typedef ObjectClassification_<ContainerAllocator> Type;

  ObjectClassification_()
    : classes_with_probabilities()  {
    }
  ObjectClassification_(const ContainerAllocator& _alloc)
    : classes_with_probabilities(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::automated_driving_msgs::ClassWithProbability_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::automated_driving_msgs::ClassWithProbability_<ContainerAllocator> >::other >  _classes_with_probabilities_type;
  _classes_with_probabilities_type classes_with_probabilities;



  enum {
    UNCLASSIFIED = 0u,
    PEDESTRIAN = 1u,
    BICYCLE = 2u,
    MOTORBIKE = 3u,
    CAR = 4u,
    TRUCK = 5u,
    VIRTUAL_OBJECT = 81u,
    OTHER_STATIC = 91u,
    OTHER_DYNAMIC = 92u,
  };


  typedef boost::shared_ptr< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectClassification_

typedef ::automated_driving_msgs::ObjectClassification_<std::allocator<void> > ObjectClassification;

typedef boost::shared_ptr< ::automated_driving_msgs::ObjectClassification > ObjectClassificationPtr;
typedef boost::shared_ptr< ::automated_driving_msgs::ObjectClassification const> ObjectClassificationConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automated_driving_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/mrtros/share/std_msgs/cmake/../msg'], 'automated_driving_msgs': ['/home/kal5-2/rammbo/src/automated_driving_msgs/msg'], 'shape_msgs': ['/opt/mrtros/share/shape_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/mrtros/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2870d8643da9a6670bb7ff8151c06889";
  }

  static const char* value(const ::automated_driving_msgs::ObjectClassification_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2870d8643da9a667ULL;
  static const uint64_t static_value2 = 0x0bb7ff8151c06889ULL;
};

template<class ContainerAllocator>
struct DataType< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automated_driving_msgs/ObjectClassification";
  }

  static const char* value(const ::automated_driving_msgs::ObjectClassification_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Object Classification: classes with probabilities\n"
"# License: BSD\n"
"\n"
"# Possible Types (enum, to be extended)\n"
"uint8 UNCLASSIFIED=0\n"
"uint8 PEDESTRIAN=1\n"
"uint8 BICYCLE=2\n"
"uint8 MOTORBIKE=3\n"
"uint8 CAR=4\n"
"uint8 TRUCK=5\n"
"# Virtual Object (e.g. for behavior generation)\n"
"uint8 VIRTUAL_OBJECT=81\n"
"# If object class is definitely none of the upper, these classes are to be used\n"
"uint8 OTHER_STATIC=91\n"
"uint8 OTHER_DYNAMIC=92\n"
"\n"
"# The object classes with their respective probability\n"
"#    Sorted descending by probability (highest first)\n"
"ClassWithProbability[] classes_with_probabilities\n"
"\n"
"================================================================================\n"
"MSG: automated_driving_msgs/ClassWithProbability\n"
"# One class with its respective probability\n"
"# License: BSD\n"
"\n"
"uint8 classification\n"
"\n"
"# Class probability\n"
"#    Range: [0, 1]\n"
"float32 probability\n"
;
  }

  static const char* value(const ::automated_driving_msgs::ObjectClassification_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classes_with_probabilities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectClassification_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automated_driving_msgs::ObjectClassification_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automated_driving_msgs::ObjectClassification_<ContainerAllocator>& v)
  {
    s << indent << "classes_with_probabilities[]" << std::endl;
    for (size_t i = 0; i < v.classes_with_probabilities.size(); ++i)
    {
      s << indent << "  classes_with_probabilities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::automated_driving_msgs::ClassWithProbability_<ContainerAllocator> >::stream(s, indent + "    ", v.classes_with_probabilities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMATED_DRIVING_MSGS_MESSAGE_OBJECTCLASSIFICATION_H
