// Generated by gencpp from file automated_driving_msgs/MotionState.msg
// DO NOT EDIT!


#ifndef AUTOMATED_DRIVING_MSGS_MESSAGE_MOTIONSTATE_H
#define AUTOMATED_DRIVING_MSGS_MESSAGE_MOTIONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/AccelWithCovariance.h>

namespace automated_driving_msgs
{
template <class ContainerAllocator>
struct MotionState_
{
  typedef MotionState_<ContainerAllocator> Type;

  MotionState_()
    : header()
    , child_frame_id()
    , pose()
    , twist()
    , accel()  {
    }
  MotionState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , pose(_alloc)
    , twist(_alloc)
    , accel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::AccelWithCovariance_<ContainerAllocator>  _accel_type;
  _accel_type accel;





  typedef boost::shared_ptr< ::automated_driving_msgs::MotionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::automated_driving_msgs::MotionState_<ContainerAllocator> const> ConstPtr;

}; // struct MotionState_

typedef ::automated_driving_msgs::MotionState_<std::allocator<void> > MotionState;

typedef boost::shared_ptr< ::automated_driving_msgs::MotionState > MotionStatePtr;
typedef boost::shared_ptr< ::automated_driving_msgs::MotionState const> MotionStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::automated_driving_msgs::MotionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::automated_driving_msgs::MotionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace automated_driving_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/mrtros/share/std_msgs/cmake/../msg'], 'automated_driving_msgs': ['/home/kal5-2/rammbo/src/automated_driving_msgs/msg'], 'shape_msgs': ['/opt/mrtros/share/shape_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/mrtros/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::automated_driving_msgs::MotionState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::automated_driving_msgs::MotionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::automated_driving_msgs::MotionState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb0cbaf5855ebe9a32252628d6901b03";
  }

  static const char* value(const ::automated_driving_msgs::MotionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb0cbaf5855ebe9aULL;
  static const uint64_t static_value2 = 0x32252628d6901b03ULL;
};

template<class ContainerAllocator>
struct DataType< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "automated_driving_msgs/MotionState";
  }

  static const char* value(const ::automated_driving_msgs::MotionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents an estimate of a MotionState (position, velocity and acceleration) in free space.\n"
"# NOTE: Similar to nav_msgs/Odometry but including acceleration (http://docs.ros.org/api/nav_msgs/html/msg/Odometry.html)\n"
"# License: BSD\n"
"\n"
"# Header\n"
"#   frame_id of the global reference frame (common: \"map\", \"odom\")\n"
"Header header\n"
"\n"
"#   frame_id of the child frame that this MotionState describes (common: \"vehicle\", \"sensor_x\")\n"
"string child_frame_id\n"
"\n"
"# Pose (Position + Orientation)\n"
"#   must be specified in the coordinate frame given by header.frame_id\n"
"#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/PoseWithCovariance.html\n"
"geometry_msgs/PoseWithCovariance pose\n"
"\n"
"# Velocity\n"
"#   must be specified in the coordinate frame given by child_frame_id\n"
"#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/TwistWithCovariance.html\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"# Acceleration\n"
"#   must be specified in the coordinate frame given by child_frame_id\n"
"#   For further details: http://docs.ros.org/api/geometry_msgs/html/msg/AccelWithCovariance.html\n"
"geometry_msgs/AccelWithCovariance accel\n"
"\n"
"# Treatment of unavailable data: almost as in http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html:\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the\n"
"# variance of each measurement, e.g. from a datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements, please set _the respective diagonal_ element\n"
"# of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the _diagonal_ elements\n"
"# of each covariance matrix, and disregard the associated estimates.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/AccelWithCovariance\n"
"# This expresses acceleration in free space with uncertainty.\n"
"\n"
"Accel accel\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::automated_driving_msgs::MotionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.accel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::automated_driving_msgs::MotionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::automated_driving_msgs::MotionState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::AccelWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMATED_DRIVING_MSGS_MESSAGE_MOTIONSTATE_H
