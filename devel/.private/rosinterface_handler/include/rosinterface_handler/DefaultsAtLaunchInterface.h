// *********************************************************
//
// File autogenerated for the rosinterface_handler package
// by the rosinterface_handler package.
// Please do not edit.
//
// ********************************************************/

#pragma once

#include <stdlib.h>
#include <string>
#include <limits>
#include <memory>
#include <ros/param.h>
#include <ros/node_handle.h>
#include <rosinterface_handler/utilities.hpp>
#ifdef MESSAGE_FILTERS_FOUND
#include <message_filters/subscriber.h>
#include <std_msgs/Header.h>
#else
#error message_filters was not found during compilation. Please recompile with message_filters.
#endif
#ifdef DYNAMIC_RECONFIGURE_FOUND
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wparentheses"
#include <rosinterface_handler/DefaultsAtLaunchConfig.h>
#pragma GCC diagnostic pop
#else
struct DefaultsAtLaunchConfig{};
#endif


namespace rosinterface_handler {

/// \brief Parameter struct generated by rosinterface_handler
struct DefaultsAtLaunchInterface {

  using Config = DefaultsAtLaunchConfig;
#ifdef MESSAGE_FILTERS_FOUND
  template<typename T>
  using Subscriber = message_filters::Subscriber<T>;
  template<typename T>
  using SubscriberPtr = std::shared_ptr<Subscriber<T>>;
#endif
#ifdef IF_HANDLER_DIAGNOSTICS_INCLUDED
  template<typename T>
  using DiagSubscriber = rosinterface_handler::DiagnosedSubscriber<T>;
  template<typename T>
  using DiagSubscriberPtr = std::shared_ptr<DiagSubscriber<T>>;
  template<typename T>
  using DiagPublisher = rosinterface_handler::DiagnosedPublisher<T>;
#endif

  DefaultsAtLaunchInterface(const ros::NodeHandle& private_node_handle)
  : globalNamespace_{"/"},
    publicNamespace_{rosinterface_handler::getParentNamespace(private_node_handle) + "/"},
    privateNamespace_{private_node_handle.getNamespace() + "/"},
    nodeName_{rosinterface_handler::getNodeName(private_node_handle)},
    privateNodeHandle_{private_node_handle},
    subscriber_wo_default{std::make_shared<Subscriber<std_msgs::Header>>()},
    subscriber_public_wo_default{std::make_shared<Subscriber<std_msgs::Header>>()},
    subscriber_global_wo_default{std::make_shared<Subscriber<std_msgs::Header>>()} {}

  /// \brief Get values from parameter server
  ///
  /// Will fail if a value can not be found and no default value is given.
  void fromParamServer(){
    bool success = true;
    success &= rosinterface_handler::getParam(privateNamespace_ + "verbosity_param_wo_default", verbosity_param_wo_default, std::string{"0"});
    rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity_param_wo_default");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_param_wo_default_debug");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_param_wo_default_info");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_param_wo_default_warning");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_param_wo_default_error");
    rosinterface_handler::testConstParam(privateNamespace_ + "verbosity_param_wo_default_fatal");
    success &= rosinterface_handler::getParam(privateNamespace_ + "int_param_wo_default", int_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "double_param_wo_default", double_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "str_param_wo_default", str_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "bool_param_wo_default", bool_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_int_param_wo_default", vector_int_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_double_param_wo_default", vector_double_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_bool_param_wo_default", vector_bool_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "vector_string_param_wo_default", vector_string_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "map_param_wo_default", map_param_wo_default);
    success &= rosinterface_handler::getParam(privateNamespace_ + "enum_int_param_wo_default", enum_int_param_wo_default, int{0});
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_wo_default_Small");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_wo_default_Medium");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_wo_default_Large");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_int_param_wo_default_ExtraLarge");
    success &= rosinterface_handler::getParam(privateNamespace_ + "enum_str_param_wo_default", enum_str_param_wo_default, std::string{"0"});
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_wo_default_Zero");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_wo_default_One");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_wo_default_Two");
    rosinterface_handler::testConstParam(privateNamespace_ + "enum_str_param_wo_default_Three");
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_wo_default_topic", subscriber_wo_default_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_wo_default_queue_size", subscriber_wo_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_public_wo_default_topic", subscriber_public_wo_default_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_public_wo_default_queue_size", subscriber_public_wo_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_global_wo_default_topic", subscriber_global_wo_default_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "subscriber_global_wo_default_queue_size", subscriber_global_wo_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_wo_default_topic", publisher_wo_default_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_wo_default_queue_size", publisher_wo_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_public_wo_default_topic", publisher_public_wo_default_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_public_wo_default_queue_size", publisher_public_wo_default_queue_size, int{5});
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_global_wo_default_topic", publisher_global_wo_default_topic);
    success &= rosinterface_handler::getParam(privateNamespace_ + "publisher_global_wo_default_queue_size", publisher_global_wo_default_queue_size, int{5});

    subscriber_wo_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(privateNamespace_, subscriber_wo_default_topic), uint32_t(subscriber_wo_default_queue_size));
    subscriber_public_wo_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(publicNamespace_, subscriber_public_wo_default_topic), uint32_t(subscriber_public_wo_default_queue_size));
    subscriber_global_wo_default->subscribe(privateNodeHandle_, rosinterface_handler::getTopic(globalNamespace_, subscriber_global_wo_default_topic), uint32_t(subscriber_global_wo_default_queue_size));
    publisher_wo_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(privateNamespace_, publisher_wo_default_topic), publisher_wo_default_queue_size);
    publisher_public_wo_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(publicNamespace_, publisher_public_wo_default_topic), publisher_public_wo_default_queue_size);
    publisher_global_wo_default = privateNodeHandle_.advertise<std_msgs::Header>(rosinterface_handler::getTopic(globalNamespace_, publisher_global_wo_default_topic), publisher_global_wo_default_queue_size);

    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_wo_default_queue_size", subscriber_wo_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_public_wo_default_queue_size", subscriber_public_wo_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "subscriber_global_wo_default_queue_size", subscriber_global_wo_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_wo_default_queue_size", publisher_wo_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_public_wo_default_queue_size", publisher_public_wo_default_queue_size, 0);
    rosinterface_handler::testMin<int>(privateNamespace_ + "publisher_global_wo_default_queue_size", publisher_global_wo_default_queue_size, 0);
    if(!success){
      missingParamsWarning();
      rosinterface_handler::exit("RosinterfaceHandler: GetParam could net retrieve parameter.");
    }
    ROS_DEBUG_STREAM(*this);
  }

  /// \brief Set parameters on ROS parameter server.
  void toParamServer(){
    rosinterface_handler::setParam(privateNamespace_ + "verbosity_param_wo_default",verbosity_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "int_param_wo_default",int_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "double_param_wo_default",double_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "str_param_wo_default",str_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "bool_param_wo_default",bool_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_int_param_wo_default",vector_int_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_double_param_wo_default",vector_double_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_bool_param_wo_default",vector_bool_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "vector_string_param_wo_default",vector_string_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "map_param_wo_default",map_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "enum_int_param_wo_default",enum_int_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "enum_str_param_wo_default",enum_str_param_wo_default);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_wo_default_topic",subscriber_wo_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_wo_default_queue_size",subscriber_wo_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_public_wo_default_topic",subscriber_public_wo_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_public_wo_default_queue_size",subscriber_public_wo_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_global_wo_default_topic",subscriber_global_wo_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "subscriber_global_wo_default_queue_size",subscriber_global_wo_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_wo_default_topic",publisher_wo_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_wo_default_queue_size",publisher_wo_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_public_wo_default_topic",publisher_public_wo_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_public_wo_default_queue_size",publisher_public_wo_default_queue_size);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_global_wo_default_topic",publisher_global_wo_default_topic);
    rosinterface_handler::setParam(privateNamespace_ + "publisher_global_wo_default_queue_size",publisher_global_wo_default_queue_size);
  }

  /// \brief Update configurable parameters.
  ///
  /// \param config  dynamic reconfigure struct
  /// \level ?
  void fromConfig(const Config& config, const uint32_t level = 0){
#ifdef DYNAMIC_RECONFIGURE_FOUND

    if(config.verbosity_param_wo_default != this->verbosity_param_wo_default) {
        rosinterface_handler::setParam(privateNamespace_ + "verbosity_param_wo_default", config.verbosity_param_wo_default);
        rosinterface_handler::setLoggerLevel(privateNodeHandle_, "verbosity_param_wo_default");
    }
    verbosity_param_wo_default = config.verbosity_param_wo_default;
    enum_int_param_wo_default = config.enum_int_param_wo_default;
    enum_str_param_wo_default = config.enum_str_param_wo_default;
#else
  ROS_FATAL_STREAM("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
  rosinterface_handler::exit("dynamic_reconfigure was not found during compilation. So fromConfig() is not available. Please recompile with dynamic_reconfigure.");
#endif
  }

  /// \brief Stream operator for printing parameter struct
  friend std::ostream& operator<<(std::ostream& os, const DefaultsAtLaunchInterface& p)
  {
    os << "[" << p.nodeName_ << "]\nNode " << p.nodeName_ << " has the following parameters:\n"
      << "	" << p.privateNamespace_ << "verbosity_param_wo_default:" << p.verbosity_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "verbosity_param_wo_default_debug:" << p.verbosity_param_wo_default_debug << "\n"
      << "	" << p.privateNamespace_ << "verbosity_param_wo_default_info:" << p.verbosity_param_wo_default_info << "\n"
      << "	" << p.privateNamespace_ << "verbosity_param_wo_default_warning:" << p.verbosity_param_wo_default_warning << "\n"
      << "	" << p.privateNamespace_ << "verbosity_param_wo_default_error:" << p.verbosity_param_wo_default_error << "\n"
      << "	" << p.privateNamespace_ << "verbosity_param_wo_default_fatal:" << p.verbosity_param_wo_default_fatal << "\n"
      << "	" << p.privateNamespace_ << "int_param_wo_default:" << p.int_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "double_param_wo_default:" << p.double_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "str_param_wo_default:" << p.str_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "bool_param_wo_default:" << p.bool_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "vector_int_param_wo_default:" << p.vector_int_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "vector_double_param_wo_default:" << p.vector_double_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "vector_bool_param_wo_default:" << p.vector_bool_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "vector_string_param_wo_default:" << p.vector_string_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "map_param_wo_default:" << p.map_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_wo_default:" << p.enum_int_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_wo_default_Small:" << p.enum_int_param_wo_default_Small << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_wo_default_Medium:" << p.enum_int_param_wo_default_Medium << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_wo_default_Large:" << p.enum_int_param_wo_default_Large << "\n"
      << "	" << p.privateNamespace_ << "enum_int_param_wo_default_ExtraLarge:" << p.enum_int_param_wo_default_ExtraLarge << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_wo_default:" << p.enum_str_param_wo_default << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_wo_default_Zero:" << p.enum_str_param_wo_default_Zero << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_wo_default_One:" << p.enum_str_param_wo_default_One << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_wo_default_Two:" << p.enum_str_param_wo_default_Two << "\n"
      << "	" << p.privateNamespace_ << "enum_str_param_wo_default_Three:" << p.enum_str_param_wo_default_Three << "\n"
      << "	" << p.privateNamespace_ << "subscriber_wo_default_topic:" << p.subscriber_wo_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_wo_default_queue_size:" << p.subscriber_wo_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_public_wo_default_topic:" << p.subscriber_public_wo_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_public_wo_default_queue_size:" << p.subscriber_public_wo_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "subscriber_global_wo_default_topic:" << p.subscriber_global_wo_default_topic << "\n"
      << "	" << p.privateNamespace_ << "subscriber_global_wo_default_queue_size:" << p.subscriber_global_wo_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "publisher_wo_default_topic:" << p.publisher_wo_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_wo_default_queue_size:" << p.publisher_wo_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "publisher_public_wo_default_topic:" << p.publisher_public_wo_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_public_wo_default_queue_size:" << p.publisher_public_wo_default_queue_size << "\n"
      << "	" << p.privateNamespace_ << "publisher_global_wo_default_topic:" << p.publisher_global_wo_default_topic << "\n"
      << "	" << p.privateNamespace_ << "publisher_global_wo_default_queue_size:" << p.publisher_global_wo_default_queue_size << "\n"
;
    return os;
  }

  /// \brief get the node handle that the interface struct uses internally
  ros::NodeHandle getPrivateNodeHandle() {
      return privateNodeHandle_;
  }

  /// \brief returns the name of the node (works in nodelets, too)
  const std::string& nodeName() {
      return nodeName_;
  }
private:
  const std::string globalNamespace_;
  const std::string publicNamespace_;
  const std::string privateNamespace_;
  const std::string nodeName_;
  ros::NodeHandle privateNodeHandle_;

public:
  std::string verbosity_param_wo_default; /*!< Sets the verbosity for this node */
  static constexpr auto verbosity_param_wo_default_debug = "debug"; /*!< Constant for enum verbosity_param_wo_default */
  static constexpr auto verbosity_param_wo_default_info = "info"; /*!< Constant for enum verbosity_param_wo_default */
  static constexpr auto verbosity_param_wo_default_warning = "warning"; /*!< Constant for enum verbosity_param_wo_default */
  static constexpr auto verbosity_param_wo_default_error = "error"; /*!< Constant for enum verbosity_param_wo_default */
  static constexpr auto verbosity_param_wo_default_fatal = "fatal"; /*!< Constant for enum verbosity_param_wo_default */
  int int_param_wo_default; /*!< An Integer parameter */
  double double_param_wo_default; /*!< A double parameter */
  std::string str_param_wo_default; /*!< A string parameter */
  bool bool_param_wo_default; /*!< A Boolean parameter */
  std::vector<int> vector_int_param_wo_default; /*!< A vector of int parameter */
  std::vector<double> vector_double_param_wo_default; /*!< A vector of double parameter */
  std::vector<bool> vector_bool_param_wo_default; /*!< A vector of bool parameter */
  std::vector<std::string> vector_string_param_wo_default; /*!< A vector of string parameter */
  std::map<std::string,std::string> map_param_wo_default; /*!< A map parameter */
  int enum_int_param_wo_default; /*!< int enum */
  static constexpr auto enum_int_param_wo_default_Small = 0; /*!< Constant for enum enum_int_param_wo_default */
  static constexpr auto enum_int_param_wo_default_Medium = 1; /*!< Constant for enum enum_int_param_wo_default */
  static constexpr auto enum_int_param_wo_default_Large = 2; /*!< Constant for enum enum_int_param_wo_default */
  static constexpr auto enum_int_param_wo_default_ExtraLarge = 3; /*!< Constant for enum enum_int_param_wo_default */
  std::string enum_str_param_wo_default; /*!< string enum */
  static constexpr auto enum_str_param_wo_default_Zero = "Zero"; /*!< Constant for enum enum_str_param_wo_default */
  static constexpr auto enum_str_param_wo_default_One = "One"; /*!< Constant for enum enum_str_param_wo_default */
  static constexpr auto enum_str_param_wo_default_Two = "Two"; /*!< Constant for enum enum_str_param_wo_default */
  static constexpr auto enum_str_param_wo_default_Three = "Three"; /*!< Constant for enum enum_str_param_wo_default */
  std::string subscriber_wo_default_topic; /*!< Topic for subscriber */
  int subscriber_wo_default_queue_size; /*!< Queue size for subscriber */
  std::string subscriber_public_wo_default_topic; /*!< Topic for public subscriber */
  int subscriber_public_wo_default_queue_size; /*!< Queue size for public subscriber */
  std::string subscriber_global_wo_default_topic; /*!< Topic for global subscriber */
  int subscriber_global_wo_default_queue_size; /*!< Queue size for global subscriber */
  std::string publisher_wo_default_topic; /*!< Topic for publisher */
  int publisher_wo_default_queue_size; /*!< Queue size for publisher */
  std::string publisher_public_wo_default_topic; /*!< Topic for public publisher */
  int publisher_public_wo_default_queue_size; /*!< Queue size for public publisher */
  std::string publisher_global_wo_default_topic; /*!< Topic for global publisher */
  int publisher_global_wo_default_queue_size; /*!< Queue size for global publisher */
  ros::Publisher publisher_wo_default; /*!< publisher */
  ros::Publisher publisher_public_wo_default; /*!< public publisher */
  ros::Publisher publisher_global_wo_default; /*!< global publisher */
  SubscriberPtr<std_msgs::Header> subscriber_wo_default; /*!< subscriber */
  SubscriberPtr<std_msgs::Header> subscriber_public_wo_default; /*!< public subscriber */
  SubscriberPtr<std_msgs::Header> subscriber_global_wo_default; /*!< global subscriber */

private:
  /// \brief Issue a warning about missing default parameters.
  void missingParamsWarning(){
    ROS_WARN_STREAM("[" << nodeName_ << "]\nThe following parameters do not have default values and need to be specified:\n"
      << "	" << privateNamespace_ << "int_param_wo_default" << " (int) \n"
      << "	" << privateNamespace_ << "double_param_wo_default" << " (double) \n"
      << "	" << privateNamespace_ << "str_param_wo_default" << " (std::string) \n"
      << "	" << privateNamespace_ << "bool_param_wo_default" << " (bool) \n"
      << "	" << privateNamespace_ << "vector_int_param_wo_default" << " (std::vector<int>) \n"
      << "	" << privateNamespace_ << "vector_double_param_wo_default" << " (std::vector<double>) \n"
      << "	" << privateNamespace_ << "vector_bool_param_wo_default" << " (std::vector<bool>) \n"
      << "	" << privateNamespace_ << "vector_string_param_wo_default" << " (std::vector<std::string>) \n"
      << "	" << privateNamespace_ << "map_param_wo_default" << " (std::map<std::string,std::string>) \n"
      << "	" << privateNamespace_ << "subscriber_wo_default_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "subscriber_public_wo_default_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "subscriber_global_wo_default_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "publisher_wo_default_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "publisher_public_wo_default_topic" << " (std::string) \n"
      << "	" << privateNamespace_ << "publisher_global_wo_default_topic" << " (std::string) \n"
    );
  }
};

} // namespace rosinterface_handler
